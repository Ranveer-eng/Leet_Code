class Solution {
    public static String removeLeadingZeroes(String value) {
     while (value.length() > 1 && value.indexOf("0")==0)
         value = value.substring(1);
         return value;
    }
    
    public int myAtoi(String str) {
        String names = "-+0123456789";
        //str = str.replaceAll("\\s","");
        str = str.trim();
        String s = "";
        long num = 0;
        for(int i = 0; i < str.length(); i++){
            if((String.valueOf(str.charAt(i)).equals("-") || String.valueOf(str.charAt(i)).equals("+") )&& i != 0){
                break;
            }
            if(names.contains(String.valueOf(str.charAt(i)))){
                s += String.valueOf(str.charAt(i));
            }else{
                break;
            }
        }
        if( !s.equals("") && s.charAt(0) != '-')
            s = removeLeadingZeroes(s);
        else if(!s.equals("")){
            s = removeLeadingZeroes(s.substring(1));
            s = "-" + s;
        }
        if(s.equals("")){
            return 0;
        }else if(s.substring(s.length()-1).equals("-") || s.substring(s.length()-1).equals("+")){
            return 0;
        }
        for(int i = 0; i < s.length(); i++){
            if(String.valueOf(s.charAt(i)).equals("-") || String.valueOf(s.charAt(i)).equals("+")){
                continue;
            }else if(i <= 12){
                num = num*10 + Long.parseLong(String.valueOf(s.charAt(i)));
            }
        }
        if(String.valueOf(s.charAt(0)).equals("-")){
            num = 0 - num;
        }
        if(num < Integer.MIN_VALUE){
            return Integer.MIN_VALUE;
        }else if(num > Integer.MAX_VALUE){
            return Integer.MAX_VALUE;
        }else{
            return (int)num;
        }
    }
}


//Another Approach 

class Solution {
    
    public int myAtoi(String str) {
        //remove whitespaces
        str = str.trim();
        
        //sanity check
        if(str == null || str.length() == 0) {
            return 0;
        }
        
        //declare result of type double to handle overflow cases
        double result = 0;
        
        
        //check for positive or negative sign
        boolean isNegative = false;
        int startIndex = 0;
        
        if(str.charAt(0) == '+' || str.charAt(0) == '-') {
            ++startIndex;
        }
        
        if(str.charAt(0) == '-') {
            isNegative = true;
        }
        
        //handle numeric case = "123"
        for(int i = startIndex; i < str.length(); i++) {
            //handle for non numeric characters
            if(str.charAt(i) < '0' || str.charAt(i) > '9') { //checking if ascii value is below or above 0 or 9
                break;
            }
            int digitValue = (int)(str.charAt(i) - '0');
            result = result*10 + digitValue;
        }
        
        //toggle result in case of negative is true
        if(isNegative) {
            result = -result;
        }
        
        //handle underflow
        if(result < Integer.MIN_VALUE) {
            return Integer.MIN_VALUE;
        }
        //handle overflow
        if(result > Integer.MAX_VALUE) {
            return Integer.MAX_VALUE;
        }
        //return result
        return (int)result;
        
        //T O(n) S O(1)
    }
}


















