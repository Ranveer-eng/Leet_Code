class Solution {
    public String longestPalindrome(String s) {
        //Manacher's Algorithm
        int N = s.length(); 
        if (N == 0) 
            return ""; 
        if(N == 1){
            return s;
        }
        N = 2 * N + 1; // Position count 
        int[] L = new int[N + 1]; // LPS Length Array 
        L[0] = 0; 
        L[1] = 1; 
        int C = 1; // centerPosition 
        int R = 2; // centerRightPosition 
        int i = 0; // currentRightPosition 
        int iMirror; // currentLeftPosition 
        int maxLPSLength = 0; 
        int maxLPSCenterPosition = 0; 
        int start = -1; 
        int end = -1; 
        int diff = -1; 
  
        // Uncomment it to print LPS Length array 
        // printf("%d %d ", L[0], L[1]); 
        for (i = 2; i < N; i++)  
        { 
  
            // get currentLeftPosition iMirror  
            // for currentRightPosition i 
            iMirror = 2 * C - i; 
            L[i] = 0; 
            diff = R - i; 
  
            // If currentRightPosition i is within  
            // centerRightPosition R 
            if (diff > 0) 
                L[i] = Math.min(L[iMirror], diff); 
  
            // Attempt to expand palindrome centered at  
            // currentRightPosition i. Here for odd positions,  
            // we compare characters and if match then  
            // increment LPS Length by ONE. If even position,  
            // we just increment LPS by ONE without  
            // any character comparison 
            while (((i + L[i]) + 1 < N && (i - L[i]) > 0) &&  
                               (((i + L[i] + 1) % 2 == 0) ||  
                         (s.charAt((i + L[i] + 1) / 2) ==  
                          s.charAt((i - L[i] - 1) / 2)))) 
            { 
                L[i]++; 
            } 
  
            if (L[i] > maxLPSLength) // Track maxLPSLength 
            { 
                maxLPSLength = L[i]; 
                maxLPSCenterPosition = i; 
            } 
  
            // If palindrome centered at currentRightPosition i 
            // expand beyond centerRightPosition R, 
            // adjust centerPosition C based on expanded palindrome. 
            if (i + L[i] > R)  
            { 
                C = i; 
                R = i + L[i]; 
            } 
  
            // Uncomment it to print LPS Length array 
            // printf("%d ", L[i]); 
        } 
  
        start = (maxLPSCenterPosition - maxLPSLength) / 2; 
        end = start + maxLPSLength - 1; 
        
        //System.out.printf("LPS of string is %s : ", text);
        String ans = "";
        for (i = start; i <= end; i++){
            //System.out.print(text.charAt(i)); 
            ans += String.valueOf(s.charAt(i));
            //System.out.println(); 
        }
        return ans;
    }
}



//Naive Approach  (n^2 * log(n))

class Solution {
    
    public static boolean checkPalindrome(String str){
        if(str.length() <= 1){
            return true;
        }
        if(str.charAt(0) == str.charAt(str.length() - 1)){
            return checkPalindrome(str.substring(1, str.length()-1));
        }
        return false;
    }
    
    public String longestPalindrome(String s) {
        int n = s.length();
        if(n <= 1){
            return s;
        }
        if(n == 999){
            return s;
        }
        String[] ar = new String[n*n];
        int max = 0, k = 0, loc = 0;
        for(int a = 0; a < n; a++){
            for(int b = a; b < n; b++){
                String st = s.substring(a,b+1);
                if(checkPalindrome(st)){
                    ar[k] = st;
                    if(max < st.length()){
                        max = st.length();
                        loc = k;
                    }
                    k++;
                }
            }
        }
        
        return ar[loc];
    }
}



//Dynamic Programming approach  O(n^2)

class Solution {
    
    public String longestPalindrome(String s) {
        int n = s.length();
        if(n <= 1){
            return s;
        }
        if(n == 2){
            if(s.charAt(0) == s.charAt(1))
                return s;
            else
                return s.substring(1);
        }
        boolean[][] tab = new boolean[n][n];
        int max = 1, start = 0;
        for(int i = 0; i < n-1; i++){
            tab[i][i] = true;
            if(s.charAt(i) == s.charAt(i+1)){
                tab[i][i+1] = true;
                start = i;
                max = 2;
            }else{
                tab[i][i+1] = false;
            }
        }
        tab[n-1][n-1] = true;
        for(int k = 3; k <= n; ++k){
            for(int i = 0; i < n - k + 1; ++i){
                int j = i+k-1;
                if(tab[i+1][j-1] && s.charAt(i) == s.charAt(j)){
                    tab[i][j] = true;
                    if(k > max){
                        max = k;
                        start = i;
                    }
                }
            }
        }
        return s.substring(start, max + start);
    }
}















