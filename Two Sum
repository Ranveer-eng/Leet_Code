//Brute force Approach O(n*n);

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] cnt = new int[2];
        for(int i = 0; i < nums.length; i++){
            for(int j = i+1; j < nums.length; j++){
                if(nums[i] + nums[j] == target){
                    cnt[0] = i;
                    cnt[1] = j;
                    return cnt;
                }
            }
        }
        return cnt;
    }
}


//2nd Approach
//Two-pass Hash Table


class Solution {
    public int[] twoSum(int[] nums, int target) {
        //Two-pass HashMap
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            map.put(nums[i], i);
        }
        for(int i = 0; i < nums.length; i++){
            int complement = target - nums[i];
            if(map.containsKey(complement) && map.get(complement) != i){
                return new int[] {map.get(complement), i};
            }
        }
        return new int[] {0,0};
    }
}


//3rd Approach
//One-pass HashMap

class Solution {
    public int[] twoSum(int[] nums, int target) { 
        //One-pass hashmap
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            int complement = target - nums[i];
            if(map.containsKey(complement)){
                return new int[] {map.get(complement), i};
            }else{
                map.put(nums[i], i);
            }
        }
        return new int[] {0,0};
    }
}


//In Python
//Use of dictionary
class Solution:
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        h = {}
        for i, num in enumerate(nums):
            n = target - num
            if n not in h:
                h[num] = i
            else:
                return [h[n], i]
        return null;






